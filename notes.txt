
+x is toward wall that we're looking straight at (when sitting at computer)
+y is toward door
+z is up

#################################################

ALWAYS RUN THIS:
cd ~/optitrack_workspace
source devel/setup.bash
roslaunch mocap_optitrack mocap.launch


STOP ROACH:
source ~/roach_workspace/devel/setup.bash
cd ~/roach_workspace/src/nn_dynamics_roach/scripts
python stop_roach.py


DIFFDRIVE:
source ~/roach_workspace/devel/setup.bash
cd ~/roach_workspace/src/nn_dynamics_roach/scripts
python diff_drive_controller.py left0


COLLECT DATA:
source ~/roach_workspace/devel/setup.bash
cd ~/roach_workspace/src/nn_dynamics_roach/scripts
python automated_data_collect.py 0
  if using joystick, also run
    rosrun joy joy_node
    python mjo.py


RUN MB:
source ~/roach_workspace/devel/setup.bash
cd ~/roach_workspace/src/nn_dynamics_roach/scripts
python train_dynamics.py



################################################# 

After making a msg, must do the following before you can import it:
(even if it shows up with rosmsg list)

cd ~/roach_workspace
catkin_make

################################################# 


- gyro data or calculate it:

  '''
  TO DO: angular velocity (calculate, or just use the one from imu)
  '''

  #r,p,yw vel
    #euler angles to ang vel
      #https://physics.stackexchange.com/questions/73961/angular-velocity-expressed-via-euler-angles
    #quaternions to ang vel
      #https://www.gamedev.net/forums/topic/543756-quaternion-to-angular-velocity/
      #omega = 2 * (q2 - q1) * conj( q1 ) / dt
  #curr_quat = a.pose.orientation
  #angular_vel_quat = multiply_quat(multiply_quat(2/dt,subtract_quat(curr_quat, old_quat)), conjugate_quat(old_quat))
  v_r=0
  v_p=0
  v_yw=0
  old_angles = np.copy(angles)
  old_quat= a.pose.orientation ###is this a shallow copy?



################### 

comments from main file, idk if useful

    #31, no added layers, onehot without cam
    #32, added layers 64, onehot without cam (50eps)
    #34, added layers 64, onehot without cam (30eps) *****
    #33, no added layers, fixed onehots rand(-1,1) + append 1
    #35, added layers 64, fixed onehots rand(-1,1) + append 1(30eps) *****
    #36, added layers 64, meanvec + append 1(30eps) **kinda
    #37, added layers 64, meanvec + append 1(50eps)

    #38, added layers 32, meanvec + append 1(40eps) **kinda ish
        #added layers 32, meanvec + append 1(70eps)
    #39, added layers 32, meanvec + append 1(50eps) -- net200 *****
    #40, added layers 32, sampleIms + append 1(50eps) -- net200 ************ THIS ONE!*****






    #length of controller run
    if(desired_shape_for_traj=='straight'):
        num_steps_per_controller_run=80
        if (task_type==['gravel']):
            num_steps_per_controller_run=85
    elif(desired_shape_for_traj=='left'):
        num_steps_per_controller_run= 130 #########120
        if(task_type==['turf']):
            num_steps_per_controller_run=110
    elif(desired_shape_for_traj=='right'):
        num_steps_per_controller_run= 150
        if ('gravel' in task_type):
            num_steps_per_controller_run=130
    elif(desired_shape_for_traj=='zigzag'):
        num_steps_per_controller_run=160
        if(task_type==['turf']):
            num_steps_per_controller_run=210
    else:
        num_steps_per_controller_run=0